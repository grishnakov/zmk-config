#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <18 17>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        tilde {
            bindings = <&kp GRAVE>;
            key-positions = <10 11>;
        };

        excamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <0 10>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
        };

        sobaka {
            bindings = <&kp AT>;
            key-positions = <1 11>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <6 16>;
        };

        hashtag {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <7 17>;
        };

        dolla {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
        };

        openpar {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 18>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
        };

        closeparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 19>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <17 27>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <16 26>;
        };

        frwdslash {
            bindings = <&kp SLASH>;
            key-positions = <18 28>;
        };

        bckslash {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <19 29>;
        };

        sqbrc {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <12 22>;
        };

        sqcls {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <13 23>;
        };

        playpause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <5 6>;
        };
    };

    macros {
        ctrl_shift: ctrl_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LSHIFT>, <&macro_press>;

            label = "CTRL_SHIFT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ETH {
            bindings = <
&mt Q Q      &kp W       &kp F       &kp P           &kp B     &kp J   &kp L      &kp U       &kp Y       &kp APOS
&mt LCTRL A  &mt LALT R  &mt LGUI S  &kp T           &kp G     &kp M   &kp N      &mt RGUI E  &mt RALT I  &mt RCTRL O
&kp Z        &kp X       &kp C       &kp D           &kp V     &kp K   &kp H      &kp COMMA   &kp DOT     &kp SEMI
                                     &kp LEFT_SHIFT  &tog 1    &tog 2  &kp SPACE
            >;
        };

        numpad {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7     &kp N8  &kp N9  &kp N0
&trans  &trans  &trans  &trans  &trans    &trans  &kp N4     &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans    &kp N0  &kp N1     &kp N2  &kp N3  &kp RIGHT_SHIFT
                        &trans  &trans    &tog 3  &kp SPACE
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans    &trans  &trans    &kp DOWN  &kp RIGHT  &kp C_VOL_DN  &kp C_VOL_UP  &trans
&trans  &trans  &kp LGUI  &trans  &trans    &trans    &trans     &trans        &trans        &trans
&trans  &trans  &trans    &trans  &trans    &kp UP    &kp LEFT   &trans        &trans        &trans
                          &trans  &tog 3    &trans    &trans
            >;
        };

        fnlayer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
